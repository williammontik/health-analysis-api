# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

FOOTERS = {
    "en": """<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
<strong>The insights in this report are generated by KataChat’s AI systems analyzing:</strong><br>
1. Our proprietary database of anonymized medical profiles across Singapore, Malaysia, and Taiwan<br>
2. Aggregated global health benchmarks from trusted OpenAI research and medical reports trend datasets<br>
<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 700+ data points for medical comparisons.</em>
</div>""",
    "zh": """<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
<strong>本报告的洞察由 KataChat 的 AI 系统生成，分析内容包括：</strong><br>
1. 我们在新加坡、马来西亚和台湾的匿名医学档案数据库<br>
2. 来自 OpenAI 研究和医疗趋势数据集的全球健康基准<br>
<em>所有数据均通过我们的 AI 模型处理，以识别具有统计意义的模式，同时严格遵守 PDPA 隐私法规。每项分析的样本量不少于 700 项。</em>
</div>""",
    "tw": """<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
<strong>本報告的洞察由 KataChat 的 AI 系統生成，分析內容包括：</strong><br>
1. 我們在新加坡、馬來西亞和台灣的匿名醫學資料庫<br>
2. 來自 OpenAI 研究與醫療趨勢資料集的全球健康基準<br>
<em>所有資料均透過我們的 AI 模型處理，以識別具統計意義的模式，同時嚴格遵守 PDPA 隱私法規。每項分析的樣本量不少於 700 筆。</em>
</div>"""
}

def send_email(html_body, lang):
    subject = {
        "en": "Your Health Insight Report",
        "zh": "您的健康洞察报告",
        "tw": "您的健康洞察報告"
    }.get(lang, "Your Health Insight Report")

    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        app.logger.error(f"Email send error: {e}")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def chat_gpt(prompt, temp=0.7):
    try:
        res = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return res.choices[0].message.content.strip()
    except Exception as e:
        logging.warning(f"GPT error: {e}")
        return ""

def translate_text(text, lang):
    if lang == "en":
        return text
    target_lang = "简体中文" if lang == "zh" else "繁體中文"
    prompt = f"请将以下内容翻译成{target_lang}，保持格式不变：\n\n{text}"
    return chat_gpt(prompt)

def generate_metrics_with_ai(prompt, lang):
    raw = chat_gpt(prompt)
    raw = translate_text(raw, lang)

    metrics = []
    current_title = ""
    labels, values = [], []

    for line in raw.splitlines():
        if line.startswith("###"):
            if current_title and labels and values:
                metrics.append({"title": current_title, "labels": labels, "values": values})
            current_title = line[3:].strip()
            labels, values = [], []
        elif ":" in line:
            label, val = line.split(":", 1)
            labels.append(label.strip())
            try:
                values.append(int(val.strip().replace("%", "")))
            except:
                values.append(50)
    if current_title and labels and values:
        metrics.append({"title": current_title, "labels": labels, "values": values})
    return metrics

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        name = data.get("name")
        dob = data.get("dob")
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details", "") or "No additional description provided."
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        prompt_metrics = (
            f"Generate health chart data for a {age}-year-old {gender} in {country} with concern '{concern}' and notes '{notes}'. "
            f"Include 3 sections prefixed with ### title, and 3 indicators below each using format 'Label: Value%'."
        )
        metrics = generate_metrics_with_ai(prompt_metrics, lang)

        summary_prompt = f"A {age}-year-old {gender} in {country} has concern '{concern}'. Description: {notes}. Write 4 helpful paragraphs for similar individuals."
        creative_prompt = f"Suggest 10 creative health tips for someone in {country}, aged {age}, gender {gender}, with concern '{concern}'. Consider this note: {notes}."

        summary = translate_text(chat_gpt(summary_prompt), lang)
        creative = translate_text(chat_gpt(creative_prompt, temp=0.85), lang)

        chart_html = ""
        for metric in metrics:
            chart_html += f"<strong>{metric['title']}</strong><br>"
            for label, value in zip(metric['labels'], metric['values']):
                chart_html += (
                    f"<div style='display:flex; align-items:center; margin-bottom:8px;'>"
                    f"<span style='width:180px;'>{label}</span>"
                    f"<div style='flex:1; background:#eee; border-radius:5px; overflow:hidden;'>"
                    f"<div style='width:{value}%; height:14px; background:#5E9CA0;'></div>"
                    f"</div><span style='margin-left:10px;'>{value}%</span></div>"
                )
            chart_html += "<br>"

        creative_html = f"<br><br><h3 style='font-size:24px; font-weight:bold;'>💡 {'创意支持建议' if lang == 'zh' else '創意支持建議' if lang == 'tw' else 'Creative Support Ideas'}</h3><br>"
        creative_html += "".join(
            f"<p style='margin-bottom:14px;'>{line.strip()}</p>" for line in creative.splitlines() if line.strip()
        )

        footer = FOOTERS.get(lang, FOOTERS["en"])

        html = (
            f"<h4 style='text-align:center; font-size:24px;'>{'🎉 全球健康洞察' if lang != 'en' else '🎉 Global Health Insights'}</h4>"
            f"<p><strong>{'法定姓名' if lang != 'en' else 'Legal Name'}:</strong> {name}<br>"
            f"<strong>{'出生日期' if lang != 'en' else 'Date of Birth'}:</strong> {dob}<br>"
            f"<strong>{'国家' if lang == 'zh' else '國家' if lang == 'tw' else 'Country'}:</strong> {country}<br>"
            f"<strong>{'性别' if lang != 'en' else 'Gender'}:</strong> {gender}<br>"
            f"<strong>{'年龄' if lang != 'en' else 'Age'}:</strong> {age}<br>"
            f"<strong>{'身高' if lang != 'en' else 'Height'}:</strong> {height} {'厘米' if lang == 'zh' else '公分' if lang == 'tw' else 'cm'}<br>"
            f"<strong>{'体重' if lang != 'en' else 'Weight'}:</strong> {weight} {'公斤'}<br>"
            f"<strong>{'主要问题' if lang != 'en' else 'Main Concern'}:</strong> {concern}<br>"
            f"<strong>{'简要说明' if lang == 'zh' else '簡要說明' if lang == 'tw' else 'Description'}:</strong> {notes}<br>"
            f"<strong>{'推荐人' if lang == 'zh' else '推薦人' if lang == 'tw' else 'Referrer'}:</strong> {ref}<br>"
            f"<strong>{'关心者' if lang == 'zh' else '關心者' if lang == 'tw' else 'Angel'}:</strong> {angel}</p>"
            f"{chart_html}<div>{summary}</div>{creative_html}{footer}"
        )

        send_email(html, lang)

        return jsonify({
            "metrics": metrics,
            "analysis": summary,
            "creative": creative_html,
            "footer": footer
        })

    except Exception as e:
        app.logger.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
