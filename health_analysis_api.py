# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {"email_subject": "Your Health Insight Report", "report_title": "🎉 Global Identical Health Insights"},
    "zh": {"email_subject": "您的健康洞察报告", "report_title": "🎉 全球健康洞察（简体）"},
    "tw": {"email_subject": "您的健康洞察報告", "report_title": "🎉 全球健康洞察（繁體）"}
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Given Legal Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Caring Person",
        "footer": "📩 This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    },
    "zh": {
        "name": "法定姓名", "dob": "出生日期", "country": "国家", "gender": "性别", "age": "年龄",
        "height": "身高（厘米）", "weight": "体重（公斤）", "concern": "主要问题", "desc": "简要说明",
        "ref": "推荐人", "angel": "关心我的人", "footer": "📩 本报告已通过电子邮件发送。所有内容由 KataChat AI 系统生成，符合 PDPA 规范。"
    },
    "tw": {
        "name": "法定姓名", "dob": "出生日期", "country": "國家", "gender": "性別", "age": "年齡",
        "height": "身高（公分）", "weight": "體重（公斤）", "concern": "主要問題", "desc": "簡要說明",
        "ref": "推薦人", "angel": "關心我的人", "footer": "📩 本報告已通過電子郵件發送。所有內容由 KataChat AI 系統生成，符合 PDPA 標準。"
    }
}

PROMPTS = {
    "en": {
        "summary": lambda age, gender, country, concern, notes:
            f"A {age}-year-old {gender} from {country} is experiencing '{concern}'. Description: {notes}. Write 4 paragraphs of advice in third-person. Avoid using 'you'.",
        "creative": lambda age, gender, country, concern, notes:
            f"As a health coach, give 10 practical suggestions for a {age}-year-old {gender} from {country} facing '{concern}'. Notes: {notes}."
    },
    "zh": {
        "summary": lambda age, gender, country, concern, notes:
            f"一位{age}歲的{gender}來自{country}，主要健康問題是「{concern}」。補充說明：{notes}。請給出4段建議，避免使用「你」，更像是對他人提出的建議。",
        "creative": lambda age, gender, country, concern, notes:
            f"請以健康教練的身份，為{country}一位{age}歲的{gender}，健康問題為「{concern}」，提出10個創意建議。說明如下：{notes}"
    },
    "tw": {
        "summary": lambda age, gender, country, concern, notes:
            f"一名{age}歲的{gender}來自{country}，健康問題為「{concern}」，描述如下：{notes}。請撰寫4段建議，不要用「你」，要像是給其他人建議。",
        "creative": lambda age, gender, country, concern, notes:
            f"請以健康教練的身份，為{country}一位{age}歲的{gender}，健康問題為「{concern}」的人，提供10個創意建議。請根據這些描述：{notes}。"
    }
}

chart_prompts = {
    "en": lambda age, gender, country, concern, notes:
        f"A {age}-year-old {gender} from {country} has the health issue '{concern}'. Notes: {notes}. "
        f"Generate 3 health categories starting with ###, and under each, list 3 real indicators like 'Sleep Quality: 70%'. Use values from 25% to 90%, no repeats.",
    "zh": lambda age, gender, country, concern, notes:
        f"一位{age}歲的{gender}來自{country}，主要健康問題是「{concern}」。補充說明：{notes}。"
        f"請列出3個以 ### 開頭的健康分類，每類包含3個真實的健康指標，格式為「指標名稱: 數值%」，範圍25%到90%，且數值不可重複。",
    "tw": lambda age, gender, country, concern, notes:
        f"{age}歲{gender}來自{country}，健康問題是「{concern}」，補充：{notes}。"
        f"請設計3個以 ### 開頭的分類，每類下列3項具體指標，例如「睡眠品質: 78%」。數值請在25%-90%，不可重複。"
}

def send_email(html_body, lang):
    subject = LANGUAGE[lang]["email_subject"]
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def generate_metrics_with_ai(prompt):
    try:
        res = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        lines = res.choices[0].message.content.strip().split("\n")
        metrics = []
        current_title, labels, values = "", [], []
        for line in lines:
            if line.strip().startswith("###"):
                if current_title and labels and values:
                    metrics.append({"title": current_title, "labels": labels, "values": values})
                current_title = line.replace("###", "").strip()
                labels, values = [], []
            elif ":" in line:
                try:
                    label, val = line.split(":", 1)
                    label = label.strip("-• ").strip()
                    val = int(val.strip().replace("%", ""))
                    labels.append(label)
                    values.append(val)
                except:
                    continue
        if current_title and labels and values:
            metrics.append({"title": current_title, "labels": labels, "values": values})
        return metrics or [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]
    except Exception as e:
        logging.error(f"Chart parse error: {e}")
        return [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en").strip().lower()
        if lang not in LANGUAGE:
            lang = "en"

        labels = LANGUAGE_TEXTS[lang]
        content = LANGUAGE[lang]
        prompts = PROMPTS[lang]
        charts = chart_prompts[lang]

        name = data.get("name")
        dob = data.get("dob")
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details", "") or "無補充說明"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        metrics = generate_metrics_with_ai(charts(age, gender, country, concern, notes))
        summary = get_openai_response(prompts["summary"](age, gender, country, concern, notes))
        creative = get_openai_response(prompts["creative"](age, gender, country, concern, notes), temp=0.85)

        html = f"<h4 style='text-align:center;'>{content['report_title']}</h4>"
        html += f"<p><strong>{labels['name']}:</strong> {name}<br><strong>{labels['dob']}:</strong> {dob}<br>"
        html += f"<strong>{labels['country']}:</strong> {country}<br><strong>{labels['gender']}:</strong> {gender}<br>"
        html += f"<strong>{labels['age']}:</strong> {age}<br><strong>{labels['height']}:</strong> {height}<br>"
        html += f"<strong>{labels['weight']}:</strong> {weight}<br><strong>{labels['concern']}:</strong> {concern}<br>"
        html += f"<strong>{labels['desc']}:</strong> {notes}<br><strong>{labels['ref']}:</strong> {ref}<br>"
        html += f"<strong>{labels['angel']}:</strong> {angel}</p>"

        for m in metrics:
            html += f"<strong>{m['title']}</strong><br>"
            for label, val in zip(m['labels'], m['values']):
                html += (
                    f"<div style='display:flex;align-items:center;margin-bottom:8px;'>"
                    f"<span style='width:180px;'>{label}</span>"
                    f"<div style='flex:1;background:#eee;border-radius:5px;overflow:hidden;'>"
                    f"<div style='width:{val}%;height:14px;background:#5E9CA0;'></div></div>"
                    f"<span style='margin-left:10px;'>{val}%</span></div>"
                )
            html += "<br>"

        creative_html = "<br><br><h3>💡</h3><br>" + "".join(f"<p>{line}</p>" for line in creative.split("\n") if line)
        html += summary + creative_html + f"<p style='color:#888;'>{labels['footer']}</p>"

        send_email(html, lang)

        return jsonify({
            "metrics": metrics,
            "analysis": summary,
            "creative": creative_html,
            "footer": labels['footer']
        })
    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "⚠️ 無法產生分析結果"

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
