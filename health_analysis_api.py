import os
import smtplib
import random
import json
import re
from flask import Flask, request, jsonify
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from openai import OpenAI

app = Flask(__name__)
client = OpenAI()

EMAIL_SENDER = "your_email@gmail.com"
EMAIL_PASSWORD = "your_app_password"
EMAIL_RECEIVER = "kata.chatbot@gmail.com"

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insights Report",
        "report_title": "üéâ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Legal Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender", "age": "Age",
        "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern", "desc": "Description",
        "ref": "Referrer", "angel": "Caring Person", "footer": "üì© This report has also been sent via email. All content generated by KataChat AI ‚Äî PDPA compliant."
    }
}

PROMPTS = {
    "en": {
        "summary": lambda a, g, c, co, n: f"You are a health analyst. Summarize a health concern from a {a}-year-old {g} in {c} with the concern: {co}. Notes: {n}. Write a friendly but insightful overview, suitable for displaying in a web report.",
        "creative": lambda a, g, c, co, n: f"You are a wellness expert. Suggest 3 creative ideas to help a {a}-year-old {g} in {c} with the concern: {co}. Context: {n}. Be creative, helpful, and encouraging. Use emoji bullets.",
    }
}

chart_prompts = {
    "en": {
        "labels": ["Clarity of Concern", "Emotional Wellbeing", "Lifestyle Balance", "Proactiveness", "Support System"],
        "gen": lambda: [random.randint(50, 95) for _ in range(5)]
    }
}

def get_openai_response(prompt, temp=0.7):
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp,
        )
        return response.choices[0].message.content.strip()
    except Exception:
        return "‚ö†Ô∏è AI system unavailable. Please try again later."

def calculate_age(dob):
    from datetime import datetime
    try:
        birth = datetime.strptime(dob, "%Y-%m-%d")
        today = datetime.today()
        return today.year - birth.year - ((today.month, today.day) < (birth.month, birth.day))
    except:
        return 30

def format_email(content, summary, creative, chart_values, labels):
    return f"""
    <h2>{content['report_title']}</h2>
    <p><b>Summary:</b><br>{summary}</p>
    <p><b>Creative Suggestions:</b><br>{creative}</p>
    <p><b>Chart Overview:</b></p>
    <ul>
        {''.join([f"<li>{label}: {val} / 100</li>" for label, val in zip(labels, chart_values)])}
    </ul>
    <p><i>{LANGUAGE_TEXTS["en"]["footer"]}</i></p>
    """

@app.route("/health_analyze", methods=["POST"])
def analyze_health():
    data = request.get_json()
    print("Received data:", data)  # ‚úÖ Debugging line

    name = data.get("name")
    dob_day = data.get("dob_day")
    dob_month = data.get("dob_month")
    dob_year = data.get("dob_year")
    dob = f"{dob_year}-{dob_month.zfill(2)}-{dob_day.zfill(2)}"  # ‚úÖ Fix here

    gender = data.get("gender")
    height = data.get("height")
    weight = data.get("weight")
    country = data.get("country")
    concern = data.get("condition")
    notes = data.get("details")
    referrer = data.get("referrer", "")
    angel = data.get("angel", "")  # Still works even if labeled ‚ÄúWellness Pal‚Äù in UI

    lang = "en"
    labels = LANGUAGE_TEXTS[lang]
    content = LANGUAGE[lang]
    prompts = PROMPTS[lang]
    charts = chart_prompts[lang]

    age = calculate_age(dob)
    chart_values = charts["gen"]()

    raw_summary = get_openai_response(prompts["summary"](age, gender, country, concern, notes))
    for dup in [
        content['report_title'],
        content['report_title'].replace("üéâ ", ""),
        content['report_title'].lower(),
        content['report_title'].replace("üéâ ", "").lower()
    ]:
        raw_summary = raw_summary.replace(dup, "").strip()
    summary = raw_summary

    raw_creative = get_openai_response(prompts["creative"](age, gender, country, concern, notes), temp=0.85)
    for dup in [
        content['report_title'],
        content['report_title'].replace("üéâ ", ""),
        content['report_title'].lower(),
        content['report_title'].replace("üéâ ", "").lower()
    ]:
        raw_creative = raw_creative.replace(dup, "").strip()
    creative = raw_creative

    html_result = f"""
    <div style='padding:20px;border:1px solid #ccc;border-radius:10px;max-width:600px;margin:auto;'>
      <h2>{content['report_title']}</h2>
      <h3>üß† Summary</h3>
      <p>{summary}</p>
      <h3>üí° Creative Suggestions</h3>
      <p>{creative}</p>
      <h3>üìä Wellness Chart</h3>
      <ul style="list-style: square; padding-left: 20px;">
        {''.join([f"<li>{label}: {val} / 100</li>" for label, val in zip(charts["labels"], chart_values)])}
      </ul>
      <p style="color:gray;font-size:14px;margin-top:20px;">{labels["footer"]}</p>
    </div>
    """

    try:
        msg = MIMEMultipart()
        msg['From'] = EMAIL_SENDER
        msg['To'] = EMAIL_RECEIVER
        msg['Subject'] = content['email_subject']
        msg.attach(MIMEText(format_email(content, summary, creative, chart_values, charts["labels"]), "html"))

        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as server:
            server.login(EMAIL_SENDER, EMAIL_PASSWORD)
            server.sendmail(EMAIL_SENDER, EMAIL_RECEIVER, msg.as_string())
    except Exception as e:
        print("Email error:", e)

    return jsonify({"html_result": html_result})
