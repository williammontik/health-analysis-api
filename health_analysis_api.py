# === START OF WORKING health_analysis_api.py ===
# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {"email_subject": "Your Health Insight Report", "report_title": "🎉 Global Identical Health Insights"},
    "zh": {"email_subject": "您的健康洞察报告", "report_title": "🎉 全球健康洞察（简体）"},
    "tw": {"email_subject": "您的健康洞察報告", "report_title": "🎉 全球健康洞察（繁體）"}
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Given Legal Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Caring Person",
        "footer": "📩 This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    },
    "zh": {
        "name": "法定姓名", "dob": "出生日期", "country": "国家", "gender": "性别", "age": "年龄",
        "height": "身高（厘米）", "weight": "体重（公斤）", "concern": "主要问题", "desc": "简要说明",
        "ref": "推荐人", "angel": "关心我的人", "footer": "📩 本报告已通过电子邮件发送。所有内容由 KataChat AI 系统生成，符合 PDPA 规范。"
    },
    "tw": {
        "name": "法定姓名", "dob": "出生日期", "country": "國家", "gender": "性別", "age": "年齡",
        "height": "身高（公分）", "weight": "體重（公斤）", "concern": "主要問題", "desc": "簡要說明",
        "ref": "推薦人", "angel": "關心我的人", "footer": "📩 本報告已通過電子郵件發送。所有內容由 KataChat AI 系統生成，符合 PDPA 標準。"
    }
}

PROMPTS = {
    "en": {
        "summary": lambda age, gender, country, concern, notes:
            f"A {age}-year-old {gender} from {country} is experiencing '{concern}'. Description: {notes}. "
            f"Write 4 paragraphs of advice in third-person. Avoid using 'you'.",
        "creative": lambda age, gender, country, concern, notes:
            f"As a health coach, give 10 practical suggestions for a {age}-year-old {gender} from {country} facing '{concern}'. Notes: {notes}."
    },
    "zh": {
        "summary": lambda age, gender, country, concern, notes:
            f"一位{age}岁的{gender}来自{country}，主要健康问题是“{concern}”。补充说明：{notes}。"
            f"请以第三人称的方式撰写4段建议内容，避免使用“你”，而是像对他人提出建议。",
        "creative": lambda age, gender, country, concern, notes:
            f"请以健康顾问的身份，为{age}岁的{gender}来自{country}、健康问题为“{concern}”的人，提供10个实用健康建议。说明：{notes}"
    },
    "tw": {
        "summary": lambda age, gender, country, concern, notes:
            f"一位{age}歲的{gender}來自{country}，健康問題為「{concern}」。補充說明：{notes}。"
            f"請撰寫4段建議，不使用「你」，要以第三人稱呈現。",
        "creative": lambda age, gender, country, concern, notes:
            f"請以健康顧問身份，為{age}歲的{gender}來自{country}、健康問題為「{concern}」的人提供10個生活建議。補充資訊：{notes}"
    }
}

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "⚠️ 無法產生分析結果"

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en").strip().lower()
        if lang not in LANGUAGE:
            lang = "en"

        labels = LANGUAGE_TEXTS[lang]
        content = LANGUAGE[lang]
        prompts = PROMPTS[lang]

        name = data.get("name")
        dob = data.get("dob")
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details", "") or "無補充說明"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        summary_text = get_openai_response(prompts["summary"](age, gender, country, concern, notes))
        creative_text = get_openai_response(prompts["creative"](age, gender, country, concern, notes), temp=0.9)

        creative_html = "<br><h3 style='font-size:24px;'>💡 Creative Suggestions:</h3><br>" + \
                        "".join(f"<p>{line.strip()}</p>" for line in creative_text.split("\n") if line.strip())

        disclaimer_html = (
            "<p style='margin-top:30px;color:#888;'>🛡️ Disclaimer:<br>"
            "🩺 This platform offers general lifestyle suggestions. "
            "Please consult a licensed medical professional for diagnosis or treatment decisions.</p>"
        )

        full_html = (
            f"<h4 style='text-align:center;'>{content['report_title']}</h4>"
            f"<p><strong>{labels['name']}:</strong> {name}<br>"
            f"<strong>{labels['dob']}:</strong> {dob}<br><strong>{labels['country']}:</strong> {country}<br>"
            f"<strong>{labels['gender']}:</strong> {gender}<br><strong>{labels['age']}:</strong> {age}<br>"
            f"<strong>{labels['height']}:</strong> {height}<br><strong>{labels['weight']}:</strong> {weight}<br>"
            f"<strong>{labels['concern']}:</strong> {concern}<br><strong>{labels['desc']}:</strong> {notes}<br>"
            f"<strong>{labels['ref']}:</strong> {ref}<br><strong>{labels['angel']}:</strong> {angel}</p>"
            f"<div style='white-space:pre-wrap;font-size:16px;'>{summary_text}</div>"
            f"{creative_html}"
            f"{disclaimer_html}"
            f"<p style='margin-top:20px;color:#888;'>{labels['footer']}</p>"
        )

        send_email(full_html, lang)

        return jsonify({
            "analysis": summary_text,
            "creative": creative_html,
            "footer": labels['footer']
        })
    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

def send_email(html_body, lang):
    subject = LANGUAGE[lang]["email_subject"]
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
# === END OF WORKING health_analysis_api.py ===
