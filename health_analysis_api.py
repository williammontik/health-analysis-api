# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "üéâ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Wellness Pal",
        "footer": "üì© This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    }
}

def build_summary_prompt(age, gender, country, concern, notes, metrics):
    metric_lines = []
    for block in metrics:
        for label, value in zip(block["labels"], block["values"]):
            metric_lines.append(f"{label}: {value}%")
    metrics_summary = ", ".join(metric_lines)

    return (
        f"A {age}-year-old {gender} from {country} is experiencing the issue '{concern}'. "
        f"Health metric readings include: {metrics_summary}. Notes: {notes}. \n\n"
        f"Write 4 rich and emotionally warm paragraphs in third-person. "
        f"‚ö†Ô∏è Never use the person‚Äôs name. Never use any personal pronouns like she, her, he, his. "
        f"Use phrasing like 'women in their 60s in {country}' or 'individuals in this age group'. "
        f"Weave the metric values naturally into the story. Include emotional and environmental context where appropriate. "
        f"Make it feel like a human wellness narrative, not robotic or clinical."
    )

def build_suggestions_prompt(age, gender, country, concern, notes):
    return (
        f"Suggest 10 specific and gentle lifestyle improvements for a {age}-year-old {gender} from {country} experiencing '{concern}'. "
        f"Use a warm, supportive tone and include helpful emojis. "
        f"Make the suggestions practical, culturally appropriate, and nurturing. "
        f"‚ö†Ô∏è Do not use the person‚Äôs name or any personal pronouns like she, her, he, his. "
        f"Use phrasing like 'women in their 60s in {country}' or 'individuals facing this concern'."
    )

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "‚ö†Ô∏è Unable to generate response."

def generate_metrics_with_ai(prompt):
    try:
        res = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        lines = res.choices[0].message.content.strip().split("\n")
        metrics = []
        current_title, labels, values = "", [], []
        for line in lines:
            if line.startswith("###"):
                if current_title and labels and values:
                    metrics.append({"title": current_title, "labels": labels, "values": values})
                current_title = line.replace("###", "").strip()
                labels, values = [], []
            elif ":" in line:
                try:
                    label, val = line.split(":", 1)
                    labels.append(label.strip())
                    values.append(int(val.strip().replace("%", "")))
                except:
                    continue
        if current_title and labels and values:
            metrics.append({"title": current_title, "labels": labels, "values": values})
        return metrics or [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]
    except Exception as e:
        logging.error(f"Chart parse error: {e}")
        return [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        logging.debug(f"POST received: {data}")

        lang = data.get("lang", "en").strip().lower()
        labels = LANGUAGE_TEXTS.get(lang, LANGUAGE_TEXTS["en"])
        content = LANGUAGE.get(lang, LANGUAGE["en"])

        name = data.get("name")
        dob = f"{data.get('dob_year')}-{str(data.get('dob_month')).zfill(2)}-{str(data.get('dob_day')).zfill(2)}"
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details") or "No additional details"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)
        chart_images = data.get("chart_images", [])

        # Generate metrics first (3 per category, 3 categories = 9)
        chart_prompt = (
            f"A {age}-year-old {gender} from {country} has the health concern '{concern}'. Notes: {notes}. "
            f"Generate 3 health categories starting with ###, each with 3 real indicators like 'Sleep Quality: 70%'. "
            f"Ensure 9 total unique metrics between 25%‚Äì90%. Avoid duplicates."
        )
        metrics = generate_metrics_with_ai(chart_prompt)

        # Generate final summary and tips
        summary_prompt = build_summary_prompt(age, gender, country, concern, notes, metrics)
        suggestions_prompt = build_suggestions_prompt(age, gender, country, concern, notes)

        summary = get_openai_response(summary_prompt)
        creative = get_openai_response(suggestions_prompt, temp=0.85)

        html_result = f"<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üß† Summary:</div><br>"
        html_result += ''.join([f"<p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>{p}</p>" for p in summary.split("\n") if p.strip()])
        html_result += f"<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üí° Creative Suggestions:</div><br>"
        html_result += ''.join([f"<p style='margin:16px 0; font-size:17px;'>{line}</p>" for line in creative.split("\n") if line.strip()])

        if chart_images:
            html_result += "<div style='margin-top:30px;'><strong style='font-size:20px;'>üìà Chart Visualizations:</strong><br><br>"
            for img in chart_images:
                html_result += f"<img src='{img}' style='width:100%;max-width:600px;margin-bottom:20px;border:1px solid #ccc;border-radius:8px;'><br>"
            html_result += "</div>"

        html_result += """
            <br><div style='background-color:#f9f9f9;color:#333;padding:20px;border-left:6px solid #4CAF50;
            border-radius:8px;margin-top:30px;'>
                <strong>üìä Insights Generated From:</strong>
                <ul style='margin-top:10px;margin-bottom:10px;padding-left:20px;line-height:1.7;'>
                    <li>Data from anonymized individuals across Singapore, Malaysia, and Taiwan</li>
                    <li>Wellness trend analysis and lifestyle benchmarking by KataChat AI</li>
                </ul>
                <p style='margin-top:10px;line-height:1.7;'>üõ°Ô∏è This is not a medical diagnosis. For serious health concerns, please consult a licensed professional.</p>
            </div>
        """

        send_email(html_result, lang)

        return jsonify({
            "metrics": metrics,
            "html_result": html_result,
            "footer": labels['footer']
        })

    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        traceback.print_exc()
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
