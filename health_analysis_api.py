# -*- coding: utf-8 -*-
import os, smtplib, logging, random, traceback
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
app.logger.setLevel(logging.DEBUG)

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@app.route("/analyze_health", methods=["POST"])
def analyze_health():
    try:
        data = request.json

        name = data.get("name", "")
        gender = data.get("gender", "")
        dob = data.get("dob", "")
        country = data.get("country", "")
        height = data.get("height", "")
        weight = data.get("weight", "")
        sleep = data.get("sleep", "")
        water = data.get("water", "")
        steps = data.get("steps", "")
        fruits = data.get("fruits", "")
        sugar = data.get("sugar", "")
        screen = data.get("screen", "")
        lang = data.get("lang", "en")

        charts = data.get("charts", {})
        summary = data.get("summary", "")
        suggestions = data.get("suggestions", [])

        bars = ""
        for label, value in charts.items():
            bars += f"<div style='margin-bottom: 16px;'><strong>{label}</strong><br><div style='background:#eee; border-radius:6px; overflow:hidden; height:20px;'><div style='height:100%; width:{value}%; background:#4CAF50;'></div></div></div>"

        suggestion_list = "<ol style='margin-top: 10px;'>"
        for s in suggestions:
            suggestion_list += f"<li style='margin-bottom: 6px;'>{s}</li>"
        suggestion_list += "</ol>"

        footer = """
        <div style="background-color:#f9f9f9; color:#333333; padding:20px; border-left:6px solid #4CAF50;
        border-radius:8px; margin-top:30px; font-size:15px; line-height:1.7;">
            <strong style="font-size:17px;">üìä Insights Generated by KataChat AI</strong><br><br>
            This wellness report is generated using KataChat‚Äôs proprietary AI models, based on:<br>
            ‚Ä¢ A secure database of anonymized health and lifestyle profiles from individuals across Singapore, Malaysia, and Taiwan<br>
            ‚Ä¢ Aggregated global wellness benchmarks and behavioral trend data from trusted OpenAI research datasets<br><br>
            All analysis complies strictly with PDPA regulations to protect your personal data while uncovering meaningful health insights.<br><br>
            üõ°Ô∏è <strong>Note:</strong> This report is not a medical diagnosis. For any serious health concerns, please consult a licensed healthcare professional.<br><br>
            üì¨ <strong>PS:</strong> A personalized report will also be sent to your email and should arrive within 24‚Äì48 hours. If you'd like to explore the findings in more detail, we'd be happy to arrange a short 15-minute call.
        </div>
        """

        email_body = f"""
        <div style='font-family:sans-serif; font-size:16px;'>
            <p><strong>üß† Summary:</strong></p>
            <div style='line-height:1.7;'>{summary}</div>
            <br><p><strong>üìä Charts:</strong></p>
            {bars}
            <br><p><strong>üí° Suggestions:</strong></p>
            {suggestion_list}
            {footer}
        </div>
        """

        msg = MIMEMultipart('alternative')
        msg['Subject'] = "New KataChatBot Submission"
        msg['From'] = SMTP_USERNAME
        msg['To'] = SMTP_USERNAME
        msg.attach(MIMEText(email_body, 'html', 'utf-8'))

        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)

        return jsonify({"summary": summary, "charts": charts, "suggestions": suggestions})

    except Exception as e:
        logging.error("Error during analysis: %s", traceback.format_exc())
        return jsonify({"error": str(e)}), 500
