# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback, re
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "üéâ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Wellness Pal",
        "footer": "üì© This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    }
}

def build_summary_prompt(age, gender, country, concern, notes, metrics):
    metric_lines = []
    for block in metrics:
        for label, value in zip(block["labels"], block["values"]):
            metric_lines.append(f"{label}: {value}%")
    metric_lines = metric_lines[:9]
    metrics_summary = ", ".join(metric_lines)

    return (
        f"Write a 4-paragraph health insight for individuals in {country} who are experiencing the concern: '{concern}'. "
        f"Focus on trends observed among people in a similar age group (around {age}) and gender ('{gender}'). "
        f"The following health metrics must be mentioned directly and accurately: {metrics_summary}. Notes: {notes}. "
        f"‚ö†Ô∏è Do NOT use any personal pronouns (like you/he/she/they) or phrases like 'this individual'. "
        f"Use only group-style phrasing such as 'people in this age group in {country}' or 'young women in {country}'. "
        f"Each paragraph must include at least one exact % from the metrics. Tone must be warm, natural, and empathetic ‚Äî avoid robotic or clinical writing."
    )

def build_suggestions_prompt(age, gender, country, concern, notes):
    return (
        f"Suggest 10 specific and gentle lifestyle improvements for a {age}-year-old {gender} from {country} experiencing '{concern}'. "
        f"Use a warm, supportive tone and include helpful emojis. "
        f"Make the suggestions practical, culturally appropriate, and nurturing. "
        f"‚ö†Ô∏è Do not use names, pronouns (she/her/he/his), or phrases like 'this individual'. "
        f"Only use phrasing like 'women in their 60s in {country}' or 'individuals facing this concern'."
    )

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        traceback.print_exc()
        return "‚ö†Ô∏è Unable to generate response."

def generate_metrics_with_ai(prompt):
    try:
        res = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        lines = res.choices[0].message.content.strip().split("\n")
        metrics = []
        current_title, labels, values = "", [], []
        for line in lines:
            if line.startswith("###"):
                if current_title and labels and values:
                    metrics.append({"title": current_title, "labels": labels, "values": values})
                current_title = line.replace("###", "").strip()
                labels, values = [], []
            elif ":" in line:
                try:
                    label, val = line.split(":", 1)
                    labels.append(label.strip())
                    values.append(int(val.strip().replace("%", "")))
                except:
                    continue
        if current_title and labels and values:
            metrics.append({"title": current_title, "labels": labels, "values": values})
        return metrics or [{
            "title": "Diet Quality",
            "labels": ["Daily intake of saturated fats", "Consumption of fiber-rich foods", "Processed food intake"],
            "values": [70, 60, 55]
        }]
    except Exception as e:
        logging.error(f"Chart parse error: {e}")
        traceback.print_exc()
        return [{
            "title": "Diet Quality",
            "labels": ["Daily intake of saturated fats", "Consumption of fiber-rich foods", "Processed food intake"],
            "values": [70, 60, 55]
        }]

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        logging.debug(f"POST received: {data}")

        lang = data.get("lang", "en").strip().lower()
        labels = LANGUAGE_TEXTS.get(lang, LANGUAGE_TEXTS["en"])
        content = LANGUAGE.get(lang, LANGUAGE["en"])

        name = data.get("name")
        chinese_name = data.get("chinese_name")
        dob = f"{data.get('dob_year')}-{str(data.get('dob_month')).zfill(2)}-{str(data.get('dob_day')).zfill(2)}"
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details") or "No additional details"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        chart_prompt = (
            f"This is a {age}-year-old {gender} from {country} experiencing the health concern: '{concern}'. Additional notes: {notes}.\n\n"
            f"Please generate exactly 3 distinct health-related metric categories based on this concern.\n"
            f"Each category must begin with ### (e.g., ### Sleep Quality) and include exactly 3 unique real-world metrics with numeric values in this format:\n\n"
            f"Metric Name: 68%\n\n"
            f"All percentages must be between 25% and 90%. Avoid placeholders or vague terms.\n"
            f"Return only the 3 formatted blocks. No intro, no explanation."
        )

        metrics = generate_metrics_with_ai(chart_prompt)

        summary_prompt = build_summary_prompt(age, gender, country, concern, notes, metrics)
        suggestions_prompt = build_suggestions_prompt(age, gender, country, concern, notes)

        summary = get_openai_response(summary_prompt)
        if "‚ö†Ô∏è" in summary:
            summary = "üí¨ Summary temporarily unavailable due to system delay."

        creative = get_openai_response(suggestions_prompt, temp=0.85)
        if "‚ö†Ô∏è" in creative:
            creative = "üí° Suggestions could not be loaded at this time. Please try again later."

        summary_clean = re.sub(r'(\n\s*\n)+', '\n', summary.strip())
        html_result = f"<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üß† Summary:</div><br>"
        html_result += f"<div style='line-height:1.7; font-size:16px; margin-bottom:4px;'>{summary_clean.replace(chr(10), '<br>')}</div>"

        html_result += f"<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üí° Creative Suggestions:</div><br>"
        html_result += ''.join([f"<p style='margin:16px 0; font-size:17px;'>{line}</p>" for line in creative.split("\n") if line.strip()])

        charts_html = "<div style='margin-top:30px;'><strong style='font-size:18px;'>üìà Health Metrics Breakdown:</strong><br><br>"
        for block in metrics:
            charts_html += f"<h4 style='margin-bottom:6px; margin-top:20px;'>{block['title']}</h4>"
            for label, value in zip(block['labels'], block['values']):
                charts_html += f"""
                <div style='margin:6px 0;'>
                    <span style='font-size:15px;'>{label}: {value}%</span><br>
                    <div style='background:#eee; border-radius:6px; width:100%; max-width:500px; height:14px;'>
                        <div style='width:{value}%; background:#4CAF50; height:14px; border-radius:6px;'></div>
                    </div>
                </div>
                """
        charts_html += "</div>"

        data_table = f"""
        <div style='margin-top:20px; font-size:16px;'>
          <strong>üìå Submitted Info:</strong><br><br>
          <ul style='line-height:1.8; padding-left:18px;'>
            <li><strong>{labels['name']}:</strong> {name}</li>
            <li><strong>üà∂ Chinese Name:</strong> {chinese_name}</li>
            <li><strong>{labels['dob']}:</strong> {dob}</li>
            <li><strong>{labels['age']}:</strong> {age}</li>
            <li><strong>{labels['gender']}:</strong> {gender}</li>
            <li><strong>{labels['country']}:</strong> {country}</li>
            <li><strong>{labels['height']}:</strong> {height} cm</li>
            <li><strong>{labels['weight']}:</strong> {weight} kg</li>
            <li><strong>{labels['concern']}:</strong> {concern}</li>
            <li><strong>{labels['desc']}:</strong> {notes}</li>
            <li><strong>{labels['ref']}:</strong> {ref}</li>
            <li><strong>{labels['angel']}:</strong> {angel}</li>
          </ul>
        </div>
        """

        full_email_html = data_table + html_result + charts_html
        send_email(full_email_html, lang)

        return jsonify({
            "metrics": metrics,
            "html_result": html_result,
            "footer": labels['footer']
        })

    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        traceback.print_exc()
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
