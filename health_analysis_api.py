# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {"email_subject": "Your Health Insight Report", "report_title": "🎉 Global Identical Health Insights"},
    "zh": {"email_subject": "您的健康深度報告", "report_title": "🎉 全球健康深度觀察 (简体)"},
    "tw": {"email_subject": "您的健康深度報告", "report_title": "🎉 全球健康深度觀察 (繁體)"}
}

LANGUAGE_TEXTS = {
    "en": {"name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
            "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
            "desc": "Brief Description", "ref": "Referrer", "angel": "Support Person",
            "footer": "📩 This report has been emailed to you. All content is generated by KataChat AI and is PDPA-compliant."},
    "zh": {"name": "法定姓名", "dob": "出生日期", "country": "国家", "gender": "性别",
            "age": "年龄", "height": "身高（厘米）", "weight": "体重（公斤）", "concern": "主要问题",
            "desc": "简要说明", "ref": "推荐人", "angel": "关心我的人",
            "footer": "📩 本报告已经通过邮件发送给您。所有内容由 KataChat AI 生成，符合 PDPA 规范。"},
    "tw": {"name": "法定姓名", "dob": "出生日期", "country": "國家", "gender": "性別",
            "age": "年齡", "height": "身高（公分）", "weight": "體重（公斤）", "concern": "主要問題",
            "desc": "簡要說明", "ref": "推薦人", "angel": "關心我的人",
            "footer": "📩 本報告已送至您的電子郵件。內容由 KataChat AI 產生，完全符合 PDPA 規範。"}
}

PROMPTS = {
    "en": {
        "summary": lambda age, gender, country, concern, notes:
            f"A {age}-year-old {gender} from {country} is experiencing '{concern}'. Description: {notes}. Please write 4 pieces of advice in a professional, third-person tone (avoid using 'you').",
        "creative": lambda age, gender, country, concern, notes:
            f"As a health coach, provide 10 creative and practical suggestions for a {age}-year-old {gender} from {country} who is dealing with '{concern}'. Extra notes: {notes}."
    },
    "zh": {
        "summary": lambda age, gender, country, concern, notes:
            f"一位{age}歲的{gender}來自{country}，主要健康問題是：「{concern}」。補充說明：{notes}。請提供 4 段建議，不要用「你」，要像是給別人的建議。",
        "creative": lambda age, gender, country, concern, notes:
            f"請以健康教練的角色，為一名{age}歲的{gender}，來自{country}，健康問題為「{concern}」，提供 10 個創意建議。說明：{notes}。"
    },
    "tw": {
        "summary": lambda age, gender, country, concern, notes:
            f"這位{age}歲的{gender}來自{country}，主要的健康問題是「{concern}」，補充說明：{notes}。請以第三人等角度，列出 4 段建議，不要用「你」。",
        "creative": lambda age, gender, country, concern, notes:
            f"請以健康教練的角色，為一名{age}歲的{gender}，來自{country}，健康問題為「{concern}」，提供 10 個創意建議。說明：{notes}。"
    }
}

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        app.logger.error(f"OpenAI error: {e}")
        return "⚠️ Cannot generate response."

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        app.logger.error(f"Email send error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        if lang not in LANGUAGE:
            lang = "en"

        labels = LANGUAGE_TEXTS[lang]
        prompts = PROMPTS[lang]
        content = LANGUAGE[lang]

        name = data.get("name")
        dob = data.get("dob")
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details", "") or "No additional notes"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        summary = get_openai_response(prompts["summary"](age, gender, country, concern, notes))
        creative = get_openai_response(prompts["creative"](age, gender, country, concern, notes), temp=0.85)

        html = (
            f"<h4 style='text-align:center;font-size:24px;'>{content['report_title']}</h4>"
            f"<p><strong>{labels['name']}:</strong> {name}<br>"
            f"<strong>{labels['dob']}:</strong> {dob}<br>"
            f"<strong>{labels['country']}:</strong> {country}<br>"
            f"<strong>{labels['gender']}:</strong> {gender}<br>"
            f"<strong>{labels['age']}:</strong> {age}<br>"
            f"<strong>{labels['height']}:</strong> {height} cm<br>"
            f"<strong>{labels['weight']}:</strong> {weight} kg<br>"
            f"<strong>{labels['concern']}:</strong> {concern}<br>"
            f"<strong>{labels['desc']}:</strong> {notes}<br>"
            f"<strong>{labels['ref']}:</strong> {ref}<br>"
            f"<strong>{labels['angel']}:</strong> {angel}</p>"
            f"<div>{summary}</div><br><div>{creative}</div><br>"
            f"<p style='color:#888;'>{labels['footer']}</p>"
        )

        send_email(html, lang)

        return jsonify({
            "analysis": summary,
            "creative": creative,
            "footer": labels['footer']
        })

    except Exception as e:
        app.logger.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
