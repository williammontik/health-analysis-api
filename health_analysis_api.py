# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "üéâ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Wellness Pal",
        "footer": "üì© This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    }
}

PROMPTS = {
    "en": {
        "creative": lambda age, gender, country, concern, notes:
            f"As a health coach, give 10 practical suggestions with emojis for a {age}-year-old {gender} from {country} facing '{concern}'. Notes: {notes}."
    }
}

chart_prompts = {
    "en": lambda age, gender, country, concern, notes:
        f"A {age}-year-old {gender} from {country} has the health issue '{concern}'. Notes: {notes}. "
        f"Generate 3 health categories starting with ###, and under each, list 3 real indicators like 'Sleep Quality: 70%'. Use values from 25% to 90%, no repeats."
}

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        return "‚ö†Ô∏è Unable to generate response."

def generate_metrics_with_ai(prompt):
    try:
        res = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        lines = res.choices[0].message.content.strip().split("\n")
        metrics = []
        current_title, labels, values = "", [], []
        for line in lines:
            if line.startswith("###"):
                if current_title and labels and values:
                    metrics.append({"title": current_title, "labels": labels, "values": values})
                current_title = line.replace("###", "").strip()
                labels, values = [], []
            elif ":" in line:
                try:
                    label, val = line.split(":", 1)
                    labels.append(label.strip())
                    values.append(int(val.strip().replace("%", "")))
                except:
                    continue
        if current_title and labels and values:
            metrics.append({"title": current_title, "labels": labels, "values": values})
        return metrics or [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]
    except Exception as e:
        logging.error(f"Chart parse error: {e}")
        return [{"title": "General Health", "labels": ["A", "B", "C"], "values": [60, 60, 60]}]

def format_chart_summary(metrics):
    parts = []
    for metric in metrics[:3]:
        for label, val in zip(metric.get("labels", []), metric.get("values", [])):
            parts.append(f"{label.strip()}: {val}%")
    return ", ".join(parts)

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        logging.debug(f"POST received: {data}")

        lang = data.get("lang", "en").strip().lower()
        labels = LANGUAGE_TEXTS["en"]
        content = LANGUAGE["en"]
        prompts = PROMPTS["en"]
        charts = chart_prompts["en"]

        name = data.get("name")
        dob = f"{data.get('dob_year')}-{str(data.get('dob_month')).zfill(2)}-{str(data.get('dob_day')).zfill(2)}"
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details") or "No additional details"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)
        chart_images = data.get("chart_images", [])

        metrics = generate_metrics_with_ai(charts(age, gender, country, concern, notes))
        chart_summary = format_chart_summary(metrics)

        summary_prompt = (
            f"You are a warm, reflective health coach writing a personalized health reflection for a {age}-year-old individual from {country} experiencing '{concern}'. "
            f"The following health metrics have been observed: {chart_summary}. Write exactly 4 emotionally rich, deeply insightful paragraphs. "
            f"Use <p style='line-height:1.7; font-size:16px; margin-bottom:16px;'>...</p> tags for each. "
            f"Weave the metric values naturally into the sentences using <strong>...</strong> formatting (e.g., <strong>Hydration: 42%</strong>). "
            f"Avoid robotic bullet points or list-like structures. Do NOT invent fictional characters or names. "
            f"Use culturally grounded language and examples appropriate for adults living in Singapore, Malaysia, or Taiwan. "
            f"The tone should be kind, slow, narrative, and wise‚Äîlike a gentle health article that understands real life."
        )
        summary = get_openai_response(summary_prompt)

        creative_raw = get_openai_response(prompts["creative"](age, gender, country, concern, notes), temp=0.85)
        creative = ''.join([f"<p style='margin:16px 0; font-size:17px;'>{line}</p>" for line in creative_raw.split("\n") if line.strip()])

        html_result = "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üß† Summary:</div><br>" + summary
        html_result += "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üí° Creative Suggestions:</div><br>" + creative

        if chart_images:
            html_result += "<div style='margin-top:30px;'><strong style='font-size:20px;'>üìà Chart Visualizations:</strong><br><br>"
            for img in chart_images:
                html_result += f"<img src='{img}' style='width:100%;max-width:600px;margin-bottom:20px;border:1px solid #ccc;border-radius:8px;'><br>"
            html_result += "</div>"

        html_result += """
            <br><div style='background-color:#f9f9f9;color:#333;padding:20px;border-left:6px solid #4CAF50;
            border-radius:8px;margin-top:30px;'>
                <strong>üìä Insights Generated From:</strong>
                <ul style='margin-top:10px;margin-bottom:10px;padding-left:20px;line-height:1.7;'>
                    <li>Data from anonymized individuals across Singapore, Malaysia, and Taiwan</li>
                    <li>Wellness trend analysis and lifestyle benchmarking by KataChat AI</li>
                </ul>
                <p style='margin-top:10px;line-height:1.7;'>üõ°Ô∏è All data is confidential and used solely for personalized insight. This platform does not serve as medical diagnosis. Please consult a licensed professional for health conditions.</p>
            </div>
        """

        send_email(html_result, lang)

        return jsonify({
            "metrics": metrics,
            "html_result": html_result,
            "footer": labels['footer']
        })

    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        traceback.print_exc()
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
