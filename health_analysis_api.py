# -*- coding: utf-8 -*-
import os, logging, smtplib, random
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {"email_subject": "Your Health Insight Report", "report_title": "🎉 Global Identical Health Insights", "disclaimer": "🩺 This platform offers general lifestyle suggestions. Please consult a licensed medical professional for diagnosis or treatment decisions.", "creative_title": "💡 Creative Health Suggestions"},
    "zh": {"email_subject": "您的健康洞察报告", "report_title": "🎉 全球健康洞察（简体）", "disclaimer": "🩺 本平台仅提供一般生活建议。如有诊断或治疗需求，请咨询专业医生。", "creative_title": "💡 创意健康建议"},
    "tw": {"email_subject": "您的健康洞察報告", "report_title": "🎉 全球健康洞察（繁體）", "disclaimer": "🩺 本平台僅提供一般生活建議。如需診療請諮詢合格醫師。", "creative_title": "💡 創意健康建議"}
}

LABELS = {
    "en": {"name": "Given Legal Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender", "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern", "desc": "Brief Description", "ref": "Referrer", "angel": "Caring Person", "footer": "📩 This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."},
    "zh": {"name": "法定姓名", "dob": "出生日期", "country": "国家", "gender": "性别", "age": "年龄", "height": "身高（厘米）", "weight": "体重（公斤）", "concern": "主要问题", "desc": "简要说明", "ref": "推荐人", "angel": "关心我的人", "footer": "📩 本报告已通过电子邮件发送。所有内容由 KataChat AI 系统生成，符合 PDPA 规范。"},
    "tw": {"name": "法定姓名", "dob": "出生日期", "country": "國家", "gender": "性別", "age": "年齡", "height": "身高（公分）", "weight": "體重（公斤）", "concern": "主要問題", "desc": "簡要說明", "ref": "推薦人", "angel": "關心我的人", "footer": "📩 本報告已通過電子郵件發送。所有內容由 KataChat AI 系統生成，符合 PDPA 標準。"}
}

PROMPTS = {
    "en": {
        "summary": lambda a,g,c,k,n: f"A {a}-year-old {g} from {c} is experiencing \"{k}\". Description: {n}. Write a brief health summary with statistics showing how similar people manage this condition. Avoid using 'you'.",
        "creative": lambda a,g,c,k,n: f"As a health coach, suggest 10 creative tips for a {a}-year-old {g} in {c} dealing with \"{k}\". Include relatable emojis and % stats if helpful. Base on: {n}"
    },
    "zh": {
        "summary": lambda a,g,c,k,n: f"一位{a}岁{g}，来自{c}，主要健康问题为「{k}」，补充说明：{n}。请撰写一段简要的健康摘要，包含统计数据，说明类似人群如何处理该问题。避免使用“你”。",
        "creative": lambda a,g,c,k,n: f"请以健康教练的身份，为{c}一位{a}岁{g}提出10个创意健康建议，应对「{k}」。建议中加入表情符号与百分比统计会更真实。补充说明：{n}"
    },
    "tw": {
        "summary": lambda a,g,c,k,n: f"一名{a}歲的{g}來自{c}，健康問題為「{k}」，補充說明：{n}。請撰寫一段摘要，說明與他相似的人如何應對此問題，並加入統計數據。避免使用「你」。",
        "creative": lambda a,g,c,k,n: f"請以健康教練身份，為{c}一位{a}歲的{g}提出10則創意健康建議來處理「{k}」。請使用表情符號與百分比資料會更生動。補充內容：{n}"
    }
}

CHART_PROMPTS = {
    "en": lambda a,g,c,k,n: f"Create 3 health categories using headings starting with ###. Under each, list 3 meaningful indicators with names and values between 25%–90%. Format: Indicator: Value%. Context: {a}-year-old {g} in {c} with \"{k}\". Notes: {n}",
    "zh": lambda a,g,c,k,n: f"为{c}{a}岁{g}的健康问题「{k}」生成3类指标图。每类用###标题，每类列出3个健康指标，格式为：指标: 数值%，范围25%–90%。补充说明：{n}",
    "tw": lambda a,g,c,k,n: f"針對{c}的{a}歲{g}，主要健康問題為「{k}」，請用###開頭列出3類，每類下有3個健康指標，格式為：指標: 數值%，介於25–90%。補充：{n}"
}

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def build_messages(lang, user_prompt):
    system_msg = {
        "en": "Please respond entirely in English.",
        "zh": "请确保以下所有回答都使用简体中文，不要使用英文。",
        "tw": "請確保以下所有回答都使用繁體中文，請勿使用英文。"
    }.get(lang, "Please respond in English.")
    return [{"role": "system", "content": system_msg}, {"role": "user", "content": user_prompt}]

def generate_metrics_with_ai(prompt_text, lang):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=build_messages(lang, prompt_text),
            temperature=0.7
        )
        lines = response.choices[0].message.content.strip().split("\n")
        metrics, title, labels, values = [], "", [], []
        for line in lines:
            if line.startswith("###"):
                if title and labels:
                    metrics.append({"title": title, "labels": labels, "values": values})
                title, labels, values = line[3:].strip(), [], []
            elif ":" in line:
                label, val = line.split(":", 1)
                labels.append(label.strip())
                try:
                    v = int(val.strip().replace("%", ""))
                    values.append(min(100, max(0, v)))
                except:
                    values.append(random.randint(30, 80))
        if title and labels:
            metrics.append({"title": title, "labels": labels, "values": values})
        return metrics
    except Exception as e:
        logging.warning(f"Metric generation failed: {e}")
        return []

def get_openai_response(prompt, lang, temp=0.75):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=build_messages(lang, prompt),
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.warning(f"Response generation failed: {e}")
        return "⚠️ Unable to generate suggestions."

def send_email(html_body, lang):
    subject = LANGUAGE[lang]["email_subject"]
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        l, c = LABELS[lang], LANGUAGE[lang]

        name = data.get("name")
        dob = data.get("dob")
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details") or ""
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        metrics = generate_metrics_with_ai(CHART_PROMPTS[lang](age, gender, country, concern, notes), lang)
        summary = get_openai_response(PROMPTS[lang]["summary"](age, gender, country, concern, notes), lang)
        creative = get_openai_response(PROMPTS[lang]["creative"](age, gender, country, concern, notes), lang, temp=0.85)

        chart_html = ""
        for m in metrics:
            chart_html += f"<strong>{m['title']}</strong><br>"
            for label, val in zip(m['labels'], m['values']):
                chart_html += f"<div style='display:flex; align-items:center; margin-bottom:8px;'><span style='width:180px;'>{label}</span><div style='flex:1; background:#eee; border-radius:5px; overflow:hidden;'><div style='width:{val}%; height:14px; background:#5E9CA0;'></div></div><span style='margin-left:10px;'>{val}%</span></div>"
            chart_html += "<br>"

        creative_html = f"<br><br><h3 style='font-size:24px; font-weight:bold;'>{c['creative_title']}</h3><br>" + "".join(f"<p style='margin-bottom:14px;'>{x}</p>" for x in creative.strip().split("\n")) + f"<p>{c['disclaimer']}</p>"
        footer = f"<p style='color:#888;'>{l['footer']}</p>"

        html = f"<h4 style='text-align:center; font-size:24px;'>{c['report_title']}</h4><p><strong>{l['name']}:</strong> {name}<br><strong>{l['dob']}:</strong> {dob}<br><strong>{l['country']}:</strong> {country}<br><strong>{l['gender']}:</strong> {gender}<br><strong>{l['age']}:</strong> {age}<br><strong>{l['height']}:</strong> {height} cm<br><strong>{l['weight']}:</strong> {weight} kg<br><strong>{l['concern']}:</strong> {concern}<br><strong>{l['desc']}:</strong> {notes}<br><strong>{l['ref']}:</strong> {ref}<br><strong>{l['angel']}:</strong> {angel}</p>" + chart_html + summary + creative_html + footer

        send_email(html, lang)

        return jsonify({
            "metrics": metrics,
            "analysis": summary,
            "creative": creative_html,
            "footer": footer
        })
    except Exception as e:
        logging.error(f"API error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
