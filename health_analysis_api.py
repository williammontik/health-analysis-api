# -*- coding: utf-8 -*-
import os, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "🎉 Global Identical Health Insights",
        "creative_header": "💡 Creative Support Ideas"
    },
    "zh": {
        "email_subject": "您的健康洞察报告",
        "report_title": "🎉 全球健康洞察（简体）",
        "creative_header": "💡 创意支持建议"
    },
    "tw": {
        "email_subject": "您的健康洞察報告",
        "report_title": "🎉 全球健康洞察（繁體）",
        "creative_header": "💡 創意支持建議"
    }
}

FOOTERS = {
    "en": '''<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>The insights in this report are generated by KataChat’s AI systems analyzing:</strong><br>
        1. Our proprietary database of anonymized medical profiles across Singapore, Malaysia, and Taiwan<br>
        2. Aggregated global health benchmarks from trusted OpenAI research and medical reports trend datasets<br>
        <em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. Sample sizes vary by analysis, with minimum thresholds of 700+ data points for medical comparisons.</em>
        </div>
        <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours. If you'd like to discuss it further, feel free to reach out — we’re happy to arrange a 15-minute call at your convenience.</p>''',

    "zh": '''<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>本报告通过 KataChat 的 AI 系统分析生成：</strong><br>
        1. 新加坡、马来西亚和台湾的匿名医疗资料库<br>
        2. 来自 OpenAI 的全球健康趋势基准数据<br>
        <em>所有资料处理均严格遵守 PDPA 隐私保护规范，分析样本数均超过 700 条以上。</em>
        </div>
        <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>附注：</strong> 本报告也已发送到您的电子邮箱，通常将在 24 小时内送达。如需进一步讨论，请联系我们，我们将乐意安排 15 分钟通话为您讲解。</p>''',

    "tw": '''<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>本報告通過 KataChat 的 AI 系統分析產生：</strong><br>
        1. 新加坡、馬來西亞與臺灣的匿名醫療資料庫<br>
        2. 來自 OpenAI 的全球健康趨勢基準資料<br>
        <em>所有資料皆遵循 PDPA 法規處理，分析樣本數達 700 筆以上。</em>
        </div>
        <p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
        <strong>附註：</strong> 此報告亦寄送至您的電子信箱，預計 24 小時內送達。如欲進一步討論，歡迎聯繫我們，我們樂意安排 15 分鐘通話協助您。</p>'''
}

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        app.logger.error(f"Email send error: {e}")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def translate_text(text, lang):
    if lang == "en": return text
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": f"Translate this into {'Simplified' if lang == 'zh' else 'Traditional'} Chinese: {text}"}],
            temperature=0.4
        )
        return result.choices[0].message.content.strip()
    except:
        return text

def get_openai_response(prompt, lang="en", temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        content = result.choices[0].message.content.strip()
        return translate_text(content, lang) if lang in ["zh", "tw"] else content
    except Exception as e:
        app.logger.error(f"OpenAI error: {e}")
        return "⚠️ 系统出错。" if lang in ["zh", "tw"] else "⚠️ Unable to generate response."

def generate_metrics_with_ai(prompt, lang="en"):
    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        lines = response.choices[0].message.content.strip().split("\n")
        metrics = []
        current_title, labels, values = "", [], []
        for line in lines:
            if line.startswith("###"):
                if current_title and labels and values:
                    metrics.append({"title": current_title, "labels": labels, "values": values})
                current_title, labels, values = line[3:].strip(), [], []
            elif ":" in line:
                label, val = line.split(":", 1)
                labels.append(label.strip())
                try: values.append(int(val.strip().replace("%", "")))
                except: values.append(50)
        if current_title and labels and values:
            metrics.append({"title": current_title, "labels": labels, "values": values})

        if lang in ["zh", "tw"]:
            for m in metrics:
                m['title'] = translate_text(m['title'], lang)
                m['labels'] = [translate_text(l, lang) for l in m['labels']]

        return metrics
    except Exception as e:
        logging.warning(f"GPT metric error: {e}")
        return []

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        content = LANGUAGE.get(lang, LANGUAGE["en"])

        name, dob, gender = data.get("name"), data.get("dob"), data.get("gender")
        height, weight = data.get("height"), data.get("weight")
        country, concern = data.get("country"), data.get("condition")
        notes, ref, angel = data.get("details", ""), data.get("referrer"), data.get("angel")
        age = compute_age(dob)

        metrics_prompt = f"Generate health chart data for a {age}-year-old {gender} in {country} with concern '{concern}' and notes '{notes}'. Include 3 sections prefixed with ### title, and 3 indicators below each using format 'Label: Value%'."
        metrics = generate_metrics_with_ai(metrics_prompt, lang)

        summary_prompt = f"A {age}-year-old {gender} in {country} has concern '{concern}'. Description: {notes}. Write 4 helpful paragraphs for similar individuals. Do not address directly."
        creative_prompt = f"As a wellness coach, suggest 10 creative health ideas for someone in {country}, aged {age}, gender {gender}, with '{concern}'. Take into account: {notes}."

        summary = get_openai_response(summary_prompt, lang)
        creative = get_openai_response(creative_prompt, lang, temp=0.85)

        chart_html = ""
        for metric in metrics:
            chart_html += f"<strong>{metric['title']}</strong><br>"
            for label, value in zip(metric['labels'], metric['values']):
                chart_html += (
                    f"<div style='display:flex; align-items:center; margin-bottom:8px;'>"
                    f"<span style='width:180px;'>{label}</span>"
                    f"<div style='flex:1; background:#eee; border-radius:5px; overflow:hidden;'>"
                    f"<div style='width:{value}%; height:14px; background:#5E9CA0;'></div>"
                    f"</div><span style='margin-left:10px;'>{value}%</span></div>"
                )
            chart_html += "<br>"

        creative_html = f"<br><br><h3 style='font-size:24px; font-weight:bold;'>{content['creative_header']}</h3><br>"
        creative_html += "".join(
            f"<p style='margin-bottom:14px;'>{line.strip()}</p>"
            for line in creative.split("\n") if line.strip()
        )

        footer = FOOTERS.get(lang, FOOTERS["en"])

        html = (
            f"<h4 style='text-align:center; font-size:24px;'>{content['report_title']}</h4>"
            f"<p><strong>Legal Name:</strong> {name}<br><strong>Date of Birth:</strong> {dob}<br>"
            f"<strong>Country:</strong> {country}<br><strong>Gender:</strong> {gender}<br><strong>Age:</strong> {age}<br>"
            f"<strong>Height:</strong> {height} cm<br><strong>Weight:</strong> {weight} kg<br>"
            f"<strong>Main Concern:</strong> {concern}<br><strong>Description:</strong> {notes}<br>"
            f"<strong>Referrer:</strong> {ref}<br><strong>Angel:</strong> {angel}</p>"
            f"{chart_html}"
            f"<div>{summary}</div>"
            f"{creative_html}"
            f"{footer}"
        )

        send_email(html, lang)

        return jsonify({
            "metrics": metrics,
            "analysis": summary,
            "creative": creative_html,
            "footer": footer
        })

    except Exception as e:
        app.logger.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
