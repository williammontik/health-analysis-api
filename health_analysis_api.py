# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "🎉 Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Description", "ref": "Referrer", "angel": "Caring Person", "footer": "📩 This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    }
}

def send_email(to_email, subject, body):
    msg = MIMEText(body, 'html')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = to_email

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error("Email send failed: %s", str(e))

@app.route("/analyze_health", methods=["POST"])
def analyze_health():
    try:
        data = request.get_json()
        logging.info("Received data: %s", data)

        user_info = {
            "name": data.get("name"),
            "dob": data.get("dob"),
            "gender": data.get("gender"),
            "country": data.get("country"),
            "email": data.get("email"),
            "lang": data.get("lang", "en")
        }

        if not user_info["email"]:
            user_info["email"] = "test@nowhere.com"

        lang = user_info["lang"]
        localized_texts = LANGUAGE_TEXTS.get(lang, LANGUAGE_TEXTS["en"])
        localized_lang = LANGUAGE.get(lang, LANGUAGE["en"])

        # 1. Generate chart response
        chart_prompt = (
            "Create 3 health-related chart categories. Each category should begin with ### followed by its name. "
            "Under each, list 2 realistic metrics using the format 'Label: 55%'. Use values from 30% to 85%. "
            "Ensure all 3 categories and 6 metrics are included clearly."
        )

        chart_result = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": chart_prompt}]
        )
        chart_response = chart_result.choices[0].message.content.strip()

        chart_sections = [line for line in chart_response.splitlines() if line.startswith("###")]
        metric_lines = [line for line in chart_response.splitlines() if "%" in line]
        if len(chart_sections) < 3 or len(metric_lines) < 6:
            logging.warning("❌ Invalid chart structure detected.")
            return jsonify({"status": "error", "message": "Chart format not valid"}), 400

        # 2. Generate summary response
        summary_prompt = (
            f"Given the following metrics, write a 3-paragraph health insight report for someone in Southeast Asia.\n"
            f"Avoid personal names or exact age. Instead, use neutral phrasing like 'individuals in this age group'.\n"
            f"Ensure warmth, emotional intelligence, medically helpful guidance.\n"
            f"\n{chart_response}\n"
        )

        summary_result = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": summary_prompt}]
        )
        summary_response = summary_result.choices[0].message.content.strip()

        if not summary_response or len(summary_response.split()) < 20:
            logging.warning("❌ Summary too short or missing.")
            return jsonify({"status": "error", "message": "Summary generation failed"}), 400

        email_body = f"<h2>{localized_lang['report_title']}</h2><pre>{chart_response}</pre><p style='line-height:1.7;font-size:16px;'>{summary_response.replace(chr(10), '<br><br>')}</p><p>{localized_texts['footer']}</p>"
        send_email(user_info["email"], localized_lang["email_subject"], email_body)

        return jsonify({
            "status": "success",
            "chart": chart_response,
            "summary": summary_response
        })

    except Exception as e:
        logging.error(traceback.format_exc())
        return jsonify({"status": "error", "message": str(e)}), 500

if __name__ == "__main__":
    app.run(debug=True)
