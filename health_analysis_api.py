# -*- coding: utf-8 -*-
import os, random, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "🎉 Global Identical Health Insights"
    }
}

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])["email_subject"]
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        app.logger.error(f"Email send error: {e}")

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def generate_metrics():
    return [
        {"title": "BMI Analysis", "labels": ["Similar Individuals", "Regional Avg", "Global Avg"], "values": [random.randint(19, 30), 23, 24]},
        {"title": "Blood Pressure", "labels": ["Similar Individuals", "Regional Avg", "Global Avg"], "values": [random.randint(110, 160), 135, 128]},
        {"title": "Cholesterol", "labels": ["Similar Individuals", "Regional Avg", "Global Avg"], "values": [random.randint(180, 250), 210, 220]}
    ]

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        app.logger.error(f"OpenAI error: {e}")
        return "⚠️ Unable to generate response."

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        content = LANGUAGE.get(lang, LANGUAGE["en"])

        name     = data.get("name")
        dob      = data.get("dob")
        gender   = data.get("gender")
        height   = data.get("height")
        weight   = data.get("weight")
        country  = data.get("country")
        concern  = data.get("condition")
        notes    = data.get("details", "") or "No additional description provided."
        ref      = data.get("referrer")
        angel    = data.get("angel")
        age      = compute_age(dob)

        metrics = generate_metrics()

        summary_prompt = (
            f"Review health data of people of similar age ({age}), gender ({gender}), and country ({country}) facing '{concern}'. "
            f"Write 4 professional, generalized paragraphs of advice. Do not mention or address any person directly."
        )
        creative_prompt = (
            f"As a wellness consultant, suggest 10 creative, actionable health improvement tips for people of similar age ({age}), gender ({gender}), "
            f"and country ({country}) experiencing '{concern}'. Use numbered format and group language only."
        )

        summary = get_openai_response(summary_prompt)
        creative = get_openai_response(creative_prompt, temp=0.85)

        chart_html = ""
        for metric in metrics:
            chart_html += f"<strong>{metric['title']}</strong><br>"
            for label, value in zip(metric['labels'], metric['values']):
                chart_html += (
                    f"<div style='display:flex; align-items:center; margin-bottom:8px;'>"
                    f"<span style='width:180px;'>{label}</span>"
                    f"<div style='flex:1; background:#eee; border-radius:5px; overflow:hidden;'>"
                    f"<div style='width:{value}%; height:14px; background:#5E9CA0;'></div>"
                    f"</div><span style='margin-left:10px;'>{value}%</span></div>"
                )
            chart_html += "<br>"

        creative_html = "<h3>💡 Creative Support Ideas</h3>"
        creative_html += "".join(f"<p>{line.strip()}</p>" for line in creative.split("\n") if line.strip())

        footer = (
            '<div style="background-color:#e6f7ff; color:#00529B; padding:15px; '
            'border-left:4px solid #00529B; margin:20px 0;">'
            '<strong>The insights in this report are generated by KataChat’s AI systems analyzing:</strong><br>'
            '1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>'
            '2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>'
            '<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. '
            'Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.</em>'
            '</div>'
            '<p style="background-color:#e6f7ff; color:#00529B; padding:15px; '
            'border-left:4px solid #00529B; margin:20px 0;">'
            '<strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours. '
            'If you\'d like to discuss it further, feel free to reach out — we’re happy to arrange a 15-minute call at your convenience.'
            '</p>'
        )

        html = (
            f"<h4 style='text-align:center; font-size:24px;'>{content['report_title']}</h4>"
            f"<p><strong>Country:</strong> {country}<br><strong>Gender:</strong> {gender}<br><strong>Age:</strong> {age}<br>"
            f"<strong>Height:</strong> {height} cm<br><strong>Weight:</strong> {weight} kg<br>"
            f"<strong>Concern:</strong> {concern}<br><strong>Brief Description:</strong> {notes}<br>"
            f"<strong>Referrer:</strong> {ref}<br><strong>Angel:</strong> {angel}</p>"
            f"{chart_html}"
            f"<div>{summary}</div>"
            f"{creative_html}"
            f"{footer}"
        )

        send_email(html, lang)

        return jsonify({
            "metrics": metrics,
            "analysis": summary,
            "creative": creative_html,
            "footer": footer
        })

    except Exception as e:
        app.logger.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
