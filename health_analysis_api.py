# -*- coding: utf-8 -*-
import os, logging, smtplib, traceback, re, random
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SMTP_SERVER = "smtp.gmail.com"
SMTP_PORT = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")

LANGUAGE = {
    "en": {
        "email_subject": "Your Health Insight Report",
        "report_title": "üéâ Global Identical Health Insights"
    }
}

LANGUAGE_TEXTS = {
    "en": {
        "name": "Full Name", "dob": "Date of Birth", "country": "Country", "gender": "Gender",
        "age": "Age", "height": "Height (cm)", "weight": "Weight (kg)", "concern": "Main Concern",
        "desc": "Brief Description", "ref": "Referrer", "angel": "Wellness Pal",
        "footer": "üì© This report has been emailed to you. All content is generated by KataChat AI, PDPA-compliant."
    }
}

def compute_age(dob):
    try:
        dt = parser.parse(dob)
        today = datetime.today()
        return today.year - dt.year - ((today.month, today.day) < (dt.month, dt.day))
    except:
        return 0

def get_openai_response(prompt, temp=0.7):
    try:
        result = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=temp
        )
        return result.choices[0].message.content
    except Exception as e:
        logging.error(f"OpenAI error: {e}")
        traceback.print_exc()
        return "‚ö†Ô∏è Unable to generate response."

def send_email(html_body, lang):
    subject = LANGUAGE.get(lang, LANGUAGE["en"])['email_subject']
    msg = MIMEText(html_body, 'html', 'utf-8')
    msg['Subject'] = subject
    msg['From'] = SMTP_USERNAME
    msg['To'] = SMTP_USERNAME
    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(SMTP_USERNAME, SMTP_PASSWORD)
            server.send_message(msg)
    except Exception as e:
        logging.error(f"Email send error: {e}")

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        logging.debug(f"POST received: {data}")

        lang = data.get("lang", "en").strip().lower()
        labels = LANGUAGE_TEXTS.get(lang, LANGUAGE_TEXTS["en"])

        name = data.get("name")
        chinese_name = data.get("chinese_name")
        dob = f"{data.get('dob_year')}-{str(data.get('dob_month')).zfill(2)}-{str(data.get('dob_day')).zfill(2)}"
        gender = data.get("gender")
        height = data.get("height")
        weight = data.get("weight")
        country = data.get("country")
        concern = data.get("condition")
        notes = data.get("details") or "No additional details"
        ref = data.get("referrer")
        angel = data.get("angel")
        age = compute_age(dob)

        categories = [
            ("Dermatological Health", ["Sun exposure", "Hydration level", "Daily skincare routine"], "#4CAF50"),
            ("Nutritional Health", ["Daily intake of fruits and vegetables", "Daily water intake", "Daily intake of processed foods"], "#FF9F40"),
            ("Physical Health", ["Daily exercise routine", "Body mass index (BMI)", "Blood pressure"], "#9966FF")
        ]

        metrics = []
        for title, labels_group, color in categories:
            values = [random.randint(25, 90) for _ in range(3)]
            metrics.append({"title": title, "labels": labels_group, "values": values, "color": color})

        # Build visual bar chart with HTML spans
        chart_html = ""
        for m in metrics:
            chart_html += f"<div style='margin-top:30px;'><strong>{m['title']}</strong><br><br>"
            for label, val in zip(m['labels'], m['values']):
                chart_html += (
                    f"<div style='margin-bottom:8px;'>"
                    f"<div>{label}</div>"
                    f"<div style='background:#eee;width:100%;height:14px;border-radius:7px;'>"
                    f"<div style='background:{m['color']};width:{val}%;height:100%;border-radius:7px;'></div>"
                    f"</div><div style='font-size:14px;margin-top:4px;'>{val}%</div></div>"
                )
            chart_html += "</div><br>"

        summary_prompt = (
            f"Write a 4-paragraph health insight about a {gender} aged {age} living in {country}, facing the issue '{concern}'. "
            f"Here are the 9 metrics: " + ", ".join([f"{l}: {v}%" for m in metrics for l, v in zip(m['labels'], m['values'])]) + ". Notes: " + notes +
            f" Use warm, natural language and mention at least one metric in each paragraph. No pronouns like he/she."
        )

        suggestions_prompt = (
            f"Suggest 10 gentle lifestyle improvements for a {age}-year-old {gender} in {country} facing '{concern}'. "
            f"Use warm tone and include emojis."
        )

        summary = get_openai_response(summary_prompt)
        creative = get_openai_response(suggestions_prompt, temp=0.85)

        summary_clean = re.sub(r'(\n\s*\n)+', '\n\n', summary.strip())

        summary_html = "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üß† Summary:</div><br>"
        for para in summary_clean.split("\n\n"):
            summary_html += f"<p style='line-height:1.6; font-size:16px; margin: 0 0 12px;'>{para.strip()}</p>"

        tips_html = "<div style='font-size:24px; font-weight:bold; margin-top:30px;'>üí° Creative Suggestions:</div><br>"
        for line in creative.split("\n"):
            if line.strip():
                tips_html += f"<p style='margin:12px 0; font-size:17px;'>{line.strip()}</p>"

        info_html = f"""
        <div style='margin-top:20px; font-size:16px;'>
          <strong>üìå Submitted Info:</strong><br><br>
          <ul style='line-height:1.8; padding-left:18px;'>
            <li><strong>{labels['name']}:</strong> {name}</li>
            <li><strong>üà∂ Chinese Name:</strong> {chinese_name}</li>
            <li><strong>{labels['dob']}:</strong> {dob}</li>
            <li><strong>{labels['age']}:</strong> {age}</li>
            <li><strong>{labels['gender']}:</strong> {gender}</li>
            <li><strong>{labels['country']}:</strong> {country}</li>
            <li><strong>{labels['height']}:</strong> {height} cm</li>
            <li><strong>{labels['weight']}:</strong> {weight} kg</li>
            <li><strong>{labels['concern']}:</strong> {concern}</li>
            <li><strong>{labels['desc']}:</strong> {notes}</li>
            <li><strong>{labels['ref']}:</strong> {ref}</li>
            <li><strong>{labels['angel']}:</strong> {angel}</li>
          </ul>
        </div>
        """

        footer = (
            '<div style="background-color:#f9f9f9; color:#333333; padding:20px; border-left:6px solid #4CAF50;'
            'border-radius:8px; margin-top:30px; font-size:15px; line-height:1.7;">'
            '<strong style="font-size:17px;">üìä Insights Generated by KataChat AI</strong><br><br>'
            'This wellness report is generated using KataChat‚Äôs proprietary AI models, based on:<br>'
            '‚Ä¢ A secure database of anonymized health and lifestyle profiles from individuals across Singapore, Malaysia, and Taiwan<br>'
            '‚Ä¢ Aggregated global wellness benchmarks and behavioral trend data from trusted OpenAI research datasets<br><br>'
            'All analysis complies strictly with PDPA regulations to protect your personal data while uncovering meaningful health insights.<br><br>'
            'üõ°Ô∏è <strong>Note:</strong> This report is not a medical diagnosis. For any serious health concerns, please consult a licensed healthcare professional.<br><br>'
            'üì¨ <strong>PS:</strong> A personalized report will also be sent to your email and should arrive within 24‚Äì48 hours. If you'd like to explore the findings in more detail, we‚Äôd be happy to arrange a short 15-minute call.'</div>'
        )

        full_html = info_html + chart_html + summary_html + tips_html + footer
        send_email(full_html, lang)

        return jsonify({
            "metrics": [{"title": m["title"], "labels": m["labels"], "values": m["values"]} for m in metrics],
            "html_result": chart_html + summary_html + tips_html + footer,
            "footer": labels['footer']
        })

    except Exception as e:
        logging.error(f"Health analyze error: {e}")
        traceback.print_exc()
        return jsonify({"error": "Server error"}), 500

if __name__ == "__main__":
    app.run(debug=True, port=int(os.getenv("PORT", 5000)), host="0.0.0.0")
