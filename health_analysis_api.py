# -*- coding: utf-8 -*-
import os, random, logging, smtplib
from datetime import datetime
from dateutil import parser
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# ... [Keep SMTP and LANGUAGE constants unchanged] ...

def generate_metrics():
    """Generate metrics with realistic value ranges"""
    return [
        {
            "title": "BMI Analysis", 
            "labels": ["Similar Individuals", "Regional Avg", "Global Avg"],
            "values": [random.uniform(18.5, 32.5), 22.3, 24.1],
            "max": 40
        },
        {
            "title": "Blood Pressure",
            "labels": ["Similar Individuals", "Regional Avg", "Global Avg"],
            "values": [random.randint(110, 140), 125, 118],
            "max": 160
        },
        {
            "title": "Cholesterol",
            "labels": ["Similar Individuals", "Regional Avg", "Global Avg"],
            "values": [random.randint(180, 250), 210, 195],
            "max": 300
        }
    ]

def create_chart_html(metrics):
    """Generate proper horizontal bar chart HTML with value scaling"""
    chart_html = ""
    for metric in metrics:
        chart_html += f"<h3 style='margin:20px 0 10px;'>{metric['title']}</h3>"
        max_value = metric['max']
        
        for label, value in zip(metric['labels'], metric['values']):
            percentage = (value / max_value) * 100
            chart_html += f"""
            <div style='margin:12px 0;'>
                <div style='display:flex; justify-content:space-between; margin-bottom:4px;'>
                    <span>{label}</span>
                    <span>{value:.1f}</span>
                </div>
                <div style='height:14px; background:#eee; border-radius:8px; overflow:hidden;'>
                    <div style='width:{percentage}%; height:100%; background:#5E9CA0;'></div>
                </div>
            </div>"""
    return chart_html

def enhanced_prompts(age, gender, country, concern):
    """Create GPT prompts with strict impersonal guidelines"""
    return (
        f"Analyze health patterns for {age}-year-old {gender}s in {country} dealing with {concern}. "
        "Generate 4 professional paragraphs comparing to population averages. Use ONLY third-person "
        "language. Never use 'you', 'your', or direct address. Focus on: "
        "1. Statistical comparisons 2. Common challenges 3. Preventive measures 4. Long-term outcomes",
        
        f"Create 10 numbered health strategies for {age}-year-old {gender}s in {country} with {concern}. "
        "Use ONLY third-person terms. Each item must: "
        "- Begin with active verb - Include implementation method - Reference population success rates"
    )

# ... [Keep send_email and compute_age functions unchanged] ...

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    try:
        data = request.get_json(force=True)
        lang = data.get("lang", "en")
        content = LANGUAGE.get(lang, LANGUAGE["en"])

        # ... [Keep data extraction unchanged] ...

        metrics = generate_metrics()
        chart_html = create_chart_html(metrics)

        summary_prompt, creative_prompt = enhanced_prompts(age, gender, country, concern)
        summary = get_openai_response(summary_prompt)
        creative = get_openai_response(creative_prompt, temp=0.85)

        creative_html = "<h3>ðŸ“Œ Population-Tested Strategies</h3>" + "".join(
            f"<p>{line.strip()}</p>" 
            for line in creative.split("\n") if line.strip()
        )

        # Maintain original footer exactly as specified
        footer = (
            '<div style="background-color:#e6f7ff; color:#00529B; padding:15px; '
            'border-left:4px solid #00529B; margin:20px 0;">'
            '<strong>The insights in this report are generated by KataChatâ€™s AI systems analyzing:</strong><br>'
            '1. Our proprietary database of anonymized professional profiles across Singapore, Malaysia, and Taiwan<br>'
            '2. Aggregated global business benchmarks from trusted OpenAI research and leadership trend datasets<br>'
            '<em>All data is processed through our AI models to identify statistically significant patterns while maintaining strict PDPA compliance. '
            'Sample sizes vary by analysis, with minimum thresholds of 1,000+ data points for management comparisons.</em>'
            '</div>'
            '<p style="background-color:#e6f7ff; color:#00529B; padding:15px; '
            'border-left:4px solid #00529B; margin:20px 0;">'
            '<strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours. '
            'If you\'d like to discuss it further, feel free to reach out â€” weâ€™re happy to arrange a 15-minute call at your convenience.'
            '</p>'
        )

        # Assemble final HTML
        html = f"""
        <h4 style='text-align:center; font-size:24px;'>{content['report_title']}</h4>
        <div style='max-width:800px; margin:0 auto;'>
            <div style='background:#f8f9fa; padding:20px; border-radius:12px; margin-bottom:25px;'>
                <p><strong>Country:</strong> {country}<br>
                <strong>Demographic:</strong> {age}y/o {gender}<br>
                <strong>Primary Concern:</strong> {concern}</p>
            </div>
            {chart_html}
            <div style='margin-top:30px;'>{summary}</div>
            {creative_html}
            {footer}
        </div>"""

        send_email(html, lang)

        return jsonify({
            "metrics": [{"title": m["title"], "labels": m["labels"], "values": m["values"]} for m in metrics],
            "analysis": summary
        })

    except Exception as e:
        app.logger.error(f"Health analyze error: {e}")
        return jsonify({"error": "Server error"}), 500

# ... [Keep main block unchanged] ...
