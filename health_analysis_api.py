import os, smtplib, random
from datetime import datetime
from email.mime.text import MIMEText
from flask import Flask, request, jsonify
from flask_cors import CORS
from openai import OpenAI

app = Flask(__name__)
CORS(app)

# ‚îÄ‚îÄ Config ‚îÄ‚îÄ
SMTP_SERVER   = "smtp.gmail.com"
SMTP_PORT     = 587
SMTP_USERNAME = "kata.chatbot@gmail.com"
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY not set")
client = OpenAI(api_key=OPENAI_API_KEY)

def compute_age(dob_str):
    try:
        bd = datetime.fromisoformat(dob_str)
        today = datetime.today()
        return today.year - bd.year - ((today.month, today.day) < (bd.month, bd.day))
    except:
        return None

def send_email(html_body: str):
    msg = MIMEText(html_body, 'html')
    msg["Subject"] = "Your Global Health Insights Report"
    msg["From"]    = SMTP_USERNAME
    msg["To"]      = SMTP_USERNAME
    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)

@app.route("/health_analyze", methods=["POST"])
def health_analyze():
    d = request.get_json(force=True)
    name      = d.get("name", "")
    dob       = d.get("dob", "")
    gender    = d.get("gender", "")
    height    = float(d.get("height", 0))
    weight    = float(d.get("weight", 0))
    country   = d.get("country", "")
    condition = d.get("condition", "")
    details   = d.get("details", "")

    age  = compute_age(dob)
    bmi  = round(weight / ((height/100)**2), 1) if height > 0 else 0
    syst = random.randint(110,160)
    chol = random.randint(150,260)

    # === Metrics Bar Data ===
    metrics = [
        ("BMI Status",       bmi, 22, 30, "#5E9CA0"),
        ("Blood Pressure",   syst, 120, 140, "#FF9F40"),
        ("Cholesterol",      chol, 200, 240, "#9966FF"),
    ]

    # === Horizontal Bar HTML ===
    bar_html = ""
    for title, val1, val2, val3, color in metrics:
        bar_html += f"<strong>{title}</strong><br>"
        for val in (val1, val2, val3):
            bar_html += (
                f"<span style='display:inline-block; width:{val}%; height:12px;"
                f" background:{color}; margin-right:6px; border-radius:4px;'></span> {val}%<br>"
            )
        bar_html += "<br>"

    # === üìÑ Personal Health Report ===
    report_html = (
        "<br>\n"
      + '<h2 class="sub">üìÑ Personal Health Report</h2>\n'
      + f"‚Ä¢ Age: {age}<br>"
      + f"‚Ä¢ Gender: {gender}<br>"
      + f"‚Ä¢ Country: {country}<br>"
      + f"‚Ä¢ Height: {height} cm<br>"
      + f"‚Ä¢ Weight: {weight} kg<br>"
      + f"‚Ä¢ BMI: {bmi}<br>"
      + f"‚Ä¢ Blood Pressure: {syst} mmHg<br>"
      + f"‚Ä¢ Cholesterol: {chol} mg/dL<br>"
      + f"‚Ä¢ Main Concern: {condition}<br>"
      + f"‚Ä¢ Description: {details}<br>"
    )

    # === üåê GPT Global Health Analytical Report ===
    prompt = f"""
Generate exactly seven analytical paragraphs for a "üåê Global Health Analytical Report", written as a public health overview for similar individuals.
Do NOT personalize or refer to any single person.

Use this data:
- Age Group: around {age}
- Gender: {gender}
- Country: {country}
- BMI: {bmi}
- Blood Pressure: {syst} mmHg
- Cholesterol: {chol} mg/dL
- Main Health Concern: {condition}
- Description: {details}

Each paragraph should offer meaningful insights or improvement ideas based on these values, including suggestions from regional/global cases.
Use <p>...</p> tags for each.
"""
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "You are a professional health data analyst and public wellness advisor."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.7
    )
    global_html = response.choices[0].message.content

    # === Footer ===
    footer = """
<div style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>The insights in this report are generated by KataChat‚Äôs AI systems analyzing:</strong><br>
  1. A regional health profile database across Singapore, Malaysia, and Taiwan<br>
  2. Aggregated global wellness benchmarks and OpenAI research on public health trends<br>
  <em>All data is anonymized and processed under PDPA compliance. Charts are based on ranges found in real-life reports.</em>
</div>
<p style="background-color:#e6f7ff; color:#00529B; padding:15px; border-left:4px solid #00529B; margin:20px 0;">
  <strong>PS:</strong> This report has also been sent to your email inbox and should arrive within 24 hours.
  If you'd like to discuss it further, we‚Äôre happy to arrange a 15-minute call at your convenience.
</p>
"""

    # === Final Assembly ===
    full_html = (
        bar_html
      + report_html
      + '<h2 class="sub" style="margin-top:0.8em; margin-bottom:0.8em;">üåê Global Health Analytical Report</h2>\n'
      + global_html
      + footer
    )

    # Send to email
    send_email(full_html)

    return jsonify({
        "metrics": [
            {"title": t, "labels": ["Your Value", "Recommended", "Risk Zone"], "values": [v1, v2, v3]}
            for t, v1, v2, v3, _ in metrics
        ],
        "analysis": full_html
    })

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.getenv("PORT", 5000)))
